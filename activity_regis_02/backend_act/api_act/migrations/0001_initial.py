# Generated by Django 3.2.12 on 2022-03-31 09:50

import api_act.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('act_place', models.CharField(default='NULL', max_length=255)),
                ('acti_image', models.ImageField(blank=True, upload_to='')),
                ('start_regis', models.DateTimeField(default=django.utils.timezone.now, verbose_name='The beginning of a register time')),
                ('end_regis', models.DateTimeField(default=django.utils.timezone.now, verbose_name='The end of a register time')),
                ('start_act', models.DateTimeField(default=django.utils.timezone.now, verbose_name='The beginning of a activity time')),
                ('end_act', models.DateTimeField(default=django.utils.timezone.now, verbose_name='The end of a activity time')),
                ('is_regis', models.BooleanField(default=False)),
                ('member_limit', models.SmallIntegerField()),
                ('registered', models.CharField(blank=True, default=0, max_length=3, null=True)),
                ('feedback_link', models.TextField(blank=True, null=True)),
                ('regis_type', models.IntegerField(choices=[(1, 'Firstcomefirstserve'), (2, 'Candidate')], default=1)),
                ('organizer', models.TextField(blank=True, max_length=255, null=True, verbose_name='Organizer ID')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('google_image', models.TextField(blank=True, null=True)),
                ('user_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('nickname', models.CharField(default='Nickname', max_length=255)),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Others')], null=True)),
                ('id_student', models.CharField(blank=True, max_length=10, null=True, validators=[api_act.models.only_int])),
                ('faculty', models.CharField(blank=True, max_length=255, null=True)),
                ('year_study', models.IntegerField(choices=[(1, 'Year One'), (2, 'Year Two'), (3, 'Year Three'), (4, 'Year Four'), (5, 'Year Five'), (6, 'Year Six'), (7, 'Professor')], default=1)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True, validators=[api_act.models.only_int])),
                ('facebook_id', models.CharField(blank=True, max_length=255, null=True)),
                ('line_id', models.CharField(blank=True, max_length=255, null=True)),
                ('registed_date_time', models.DateTimeField(blank=True, null=True, verbose_name='Registered Date Time')),
                ('activity_set', models.ManyToManyField(to='api_act.Activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
